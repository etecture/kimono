{"version":3,"file":"use-pid.js","sourceRoot":"","sources":["use-pid.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,iBAAiB,EAAY,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAEvF;;;;;GAKG;AACH,MAAM,UAAU,MAAM,CAAC,SAAkB,EAAE,UAAU,GAAG,iBAAiB;IACvE,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAqB,SAAS,CAAC,CAAC;IAChF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,oCAAoC;QACpC,MAAM,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC9D,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAExC,kBAAkB;QAClB,MAAM,WAAW,GAAG,CAAC,OAAiB,EAAE,EAAE;YACxC,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE;gBACnC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aACjC;QACH,CAAC,CAAC;QAEF,iBAAiB;QACjB,MAAM,UAAU,GAAG,CAAC,OAAiB,EAAE,EAAE;YACvC,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE;gBACnC,YAAY,CAAC,SAAS,CAAC,CAAC;aACzB;QACH,CAAC,CAAC;QAEF,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAC7C,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAE3C,OAAO,GAAG,EAAE;YACV,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;YAC9C,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC9C,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAEhB,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["import React from 'react';\nimport { defaultPtyManager, PtyEvent, PtyManager } from '../utils/pty-process-manager';\n\n/**\n * Returns the pid of the native process for a given `commandId`, if one is running.\n *\n * @param commandId\n * @param ptyManager\n */\nexport function usePID(commandId?: string, ptyManager = defaultPtyManager): number | undefined {\n  const [processId, setProcessId] = React.useState<number | undefined>(undefined);\n  React.useEffect(() => {\n    // check and maybe set initial value\n    const pty = commandId ? ptyManager.get(commandId) : undefined;\n    setProcessId(pty ? pty.pid : undefined);\n\n    // update on spawn\n    const handleSpawn = (payload: PtyEvent) => {\n      if (payload.commandId === commandId) {\n        setProcessId(payload.processId);\n      }\n    };\n\n    // update on exit\n    const handleExit = (payload: PtyEvent) => {\n      if (payload.commandId === commandId) {\n        setProcessId(undefined);\n      }\n    };\n\n    ptyManager.on(PtyManager.SPAWN, handleSpawn);\n    ptyManager.on(PtyManager.EXIT, handleExit);\n\n    return () => {\n      ptyManager.off(PtyManager.SPAWN, handleSpawn);\n      ptyManager.off(PtyManager.EXIT, handleExit);\n    };\n  }, [commandId]);\n\n  return processId;\n}\n"]}