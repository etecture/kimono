{"version":3,"file":"use-pty-command.js","sourceRoot":"","sources":["use-pty-command.ts"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Command } from '../command';\nimport { IDisposable, IPty } from 'node-pty';\nimport { defaultPtyManager, PtyManager } from '../utils/pty-process-manager';\nimport { usePID } from './use-pid';\n\nexport interface PtyController {\n  pty: IPty | null;\n  kill: (signal?: string) => void;\n  execute: () => void;\n}\n\n/**\n * Creates and returns a child process given a command object\n *\n * @param command\n * @param ptyManager\n */\nexport function usePtyCommand(command?: Command | null, ptyManager = defaultPtyManager): PtyController {\n  const [statePty, setStatePty] = React.useState<IPty | null>(null);\n  const exitListener = React.useRef<IDisposable | null>(null);\n\n  const { current: setPty } = React.useRef((pty: IPty | null) => {\n    const dispose = () => {\n      if (exitListener.current) {\n        exitListener.current.dispose();\n        exitListener.current = null;\n      }\n    };\n    if (pty) {\n      exitListener.current = pty.onExit(() => {\n        dispose();\n        setStatePty(null);\n      });\n      setStatePty(pty);\n    } else {\n      dispose();\n      setStatePty(null);\n    }\n  });\n\n  React.useEffect(() => {\n    const handleSpawn = ({ commandId }: { commandId: string }) => {\n      if (commandId === command?.id) {\n        setPty(ptyManager.get(commandId));\n      }\n    };\n    ptyManager.addListener(PtyManager.SPAWN, handleSpawn);\n    return () => {\n      ptyManager.removeListener(PtyManager.SPAWN, handleSpawn);\n    };\n  }, [command]);\n\n  const pid = usePID(command ? command.id : undefined);\n  React.useEffect(() => {\n    const p = command && ptyManager.get(command.id);\n    if (p) {\n      setPty(p);\n    } else {\n      setPty(null);\n    }\n  }, [command, pid]);\n\n  const execute = React.useCallback(() => {\n    if (!command) {\n      return;\n    }\n    const pty = ptyManager.connect(command, true);\n    setPty(pty);\n  }, [command]);\n\n  const kill = React.useCallback(() => {\n    if (command) {\n      ptyManager.kill(command.id);\n    }\n  }, [command]);\n\n  React.useEffect(() => {\n    if (command?.autoRun) {\n      execute();\n    }\n  }, []);\n\n  return { pty: statePty, execute, kill };\n}\n"]}