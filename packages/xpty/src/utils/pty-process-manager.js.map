{"version":3,"file":"pty-process-manager.js","sourceRoot":"","sources":["pty-process-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { platform } from 'os';\nimport { EventEmitter } from 'events';\n\nimport { IDisposable } from 'xterm';\nimport * as NodePty from 'node-pty';\nimport treeKill from 'tree-kill';\n\nimport { toObject } from './key-value-converter';\nimport { createCommandString } from './create-command-string';\nimport { Command } from '../command';\n\nexport interface PtyOptions {\n  shell: string;\n  cols: number;\n  rows: number;\n  cwd?: string;\n  env?: { [key: string]: string };\n}\n\nexport interface PtyEvent {\n  processId: number;\n  commandId: string;\n}\n\nexport const defaults: Partial<PtyOptions> = {\n  shell: platform() === 'win32' ? 'bash.exe' : '/bin/bash',\n  cols: 120,\n  rows: 80\n};\n\n/** Internal interface for mapping running child processes, their options and exit listeners */\ninterface PtyChildRecord {\n  options: PtyOptions;\n  childProcess: NodePty.IPty;\n  _exitListener: IDisposable;\n}\n\nexport class PtyManager extends EventEmitter {\n  public static SPAWN = 'spawn';\n  public static EXIT = 'exit';\n\n  private childProcessMap: {\n    [commandId: string]: PtyChildRecord | null;\n  } = {};\n\n  public get(commandId: string): NodePty.IPty | null;\n  public get(processId: number): NodePty.IPty | null;\n  public get(commandOrProcessId: string | number): NodePty.IPty | null {\n    if (typeof commandOrProcessId === 'string') {\n      const record = this.childProcessMap[commandOrProcessId];\n      if (record) {\n        return record.childProcess;\n      }\n    }\n\n    if (typeof commandOrProcessId === 'number') {\n      const record = Object.values(this.childProcessMap).find(\n        record => record?.childProcess?.pid === commandOrProcessId\n      );\n      if (record) {\n        return record.childProcess;\n      }\n    }\n\n    return null;\n  }\n\n  public kill(commandId: string): void;\n  public kill(processId: number): void;\n  public kill(commandOrProcessId: string | number, signal = platform() === 'win32' ? undefined : 'SIGKILL'): void {\n    if (typeof commandOrProcessId === 'string') {\n      const commandId = commandOrProcessId as string;\n      const record = this.childProcessMap[commandId];\n      if (record) {\n        treeKill(record.childProcess.pid, signal);\n      }\n    }\n    if (typeof commandOrProcessId === 'number') {\n      const processId = commandOrProcessId as number;\n      treeKill(processId, signal);\n    }\n  }\n\n  /**\n   * Connects to an existing process or creates it, then returns it\n   * @param command The command object\n   * @param execute whether to automatically execute the command\n   */\n  public connect(command: Command, execute?: boolean): NodePty.IPty {\n    const childProcess = this._ensureChildProcess(command);\n    if (execute) {\n      this.execute(command);\n    }\n    return childProcess;\n  }\n\n  public execute(command: Command, options = this.createPtyOptions(command)): NodePty.IPty {\n    const childProcess = this._ensureChildProcess(command, options);\n    childProcess.write(createCommandString(command));\n    childProcess.write('\\n');\n    return childProcess;\n  }\n\n  public createPtyOptions(command: Command): PtyOptions {\n    return {\n      ...defaults,\n      cwd: command.cwd,\n      env: {\n        ...(process.env as { [key: string]: string }),\n        ...toObject(command.env)\n      }\n    } as PtyOptions;\n  }\n\n  private _ensureChildProcess(command: Command, options = this.createPtyOptions(command)): NodePty.IPty {\n    const record = this.childProcessMap[command.id];\n    if (!record) {\n      return this._createChildProcess(command.id, options).childProcess;\n    }\n    return record.childProcess;\n  }\n\n  private _createChildProcess(commandId: string, options: PtyOptions): PtyChildRecord {\n    const ptyOptions = { ...defaults, ...options };\n    const pty = NodePty.spawn(ptyOptions.shell, [], {\n      cols: ptyOptions.cols,\n      rows: ptyOptions.rows,\n      env: ptyOptions.env,\n      cwd: ptyOptions.cwd\n    });\n\n    const record: PtyChildRecord = {\n      options: ptyOptions,\n      childProcess: pty,\n      _exitListener: pty.onExit(() => {\n        record._exitListener.dispose();\n        this.emit(PtyManager.EXIT, {\n          commandId,\n          processId: pty.pid\n        });\n        this.childProcessMap[commandId] = null;\n      })\n    };\n\n    this.childProcessMap[commandId] = record;\n\n    this.emit(PtyManager.SPAWN, {\n      commandId,\n      processId: pty.pid\n    });\n\n    return record;\n  }\n}\n\nexport const defaultPtyManager = new PtyManager();\n"]}